<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0038)http://www.htl-wels.ac.at/rf/main.html -->
<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="APR14GrundlegendeKlassen-Dateien/filelist.xml">
<title>Main</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Harald Sander</o:Author>
  <o:LastAuthor>Harald Sander</o:LastAuthor>
  <o:Revision>9</o:Revision>
  <o:Created>2009-10-06T11:27:00Z</o:Created>
  <o:LastSaved>2009-11-04T12:05:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>904</o:Words>
  <o:Characters>5701</o:Characters>
  <o:Company>HTL Wels</o:Company>
  <o:Lines>47</o:Lines>
  <o:Paragraphs>13</o:Paragraphs>
  <o:CharactersWithSpaces>6592</o:CharactersWithSpaces>
  <o:Version>10.2625</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:HyphenationZone>21</w:HyphenationZone>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]-->
<link rel=Stylesheet type="text/css" media=all
href="../../sander-Dateien/stylesheet.css">
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-margin-top-alt:auto;
	margin-right:0pt;
	mso-margin-bottom-alt:auto;
	margin-left:0pt;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:24.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
h2
	{mso-margin-top-alt:auto;
	margin-right:0pt;
	mso-margin-bottom-alt:auto;
	margin-left:0pt;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:18.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
p.MsoBodyTextIndent3, li.MsoBodyTextIndent3, div.MsoBodyTextIndent3
	{margin-top:0pt;
	margin-right:0pt;
	margin-bottom:0pt;
	margin-left:56.25pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p
	{mso-margin-top-alt:auto;
	margin-right:0pt;
	mso-margin-bottom-alt:auto;
	margin-left:0pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:70.85pt 70.85pt 56.7pt 70.85pt;
	mso-header-margin:35.4pt;
	mso-footer-margin:35.4pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:524026596;
	mso-list-type:hybrid;
	mso-list-template-ids:159832132 201785345 201785347 201785349 201785345 201785347 201785349 201785345 201785347 201785349;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	font-family:Symbol;}
@list l0:level2
	{mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level3
	{mso-level-tab-stop:108.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level5
	{mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level6
	{mso-level-tab-stop:216.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level8
	{mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level9
	{mso-level-tab-stop:324.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1
	{mso-list-id:1807967015;
	mso-list-type:hybrid;
	mso-list-template-ids:1355323008 201785345 201785347 201785349 201785345 201785347 201785349 201785345 201785347 201785349;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	font-family:Symbol;}
@list l1:level2
	{mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level3
	{mso-level-tab-stop:108.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level5
	{mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level6
	{mso-level-tab-stop:216.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level8
	{mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level9
	{mso-level-tab-stop:324.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
ol
	{margin-bottom:0pt;}
ul
	{margin-bottom:0pt;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Normale Tabelle";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0pt 5.4pt 0pt 5.4pt;
	mso-para-margin:0pt;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="5122"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body bgcolor=white background="background/synapse_background.gif" lang=DE-AT
style='tab-interval:35.4pt'>

<div class=Section1>

<h1>Grundlegende Klassen</h1>

<h2><span class=SpellE>Wrapper</span> Klassen</h2>

<p>Viele Klassen erwarten oder liefern Objekte des allgemeinen Typs <span
class=SpellE>Object</span>. Da die elementaren Datentypen aber keine Instanz
von <span class=SpellE>Object</span> sind, auch von keiner anderen Klasse
passen diese nicht in das Java Konzept.</p>

<p>Um dies zu ändern müssen die elementaren Datentypen in Objekte
&quot;eingehüllt&quot; werden.</p>

<p><span class=SpellE>Bsp</span>:</p>

<p><span class=SpellE>int</span> a = 5;</p>

<p>Integer <span class=SpellE>meinA</span> = <span class=SpellE>new</span>
Integer(a); // <span class=SpellE>meinA</span> ist jetzt ein Objekt!</p>

<p>Zu jedem elementaren Datentyp gibt es eine <span class=SpellE>Wrapper-Klasse</span>:</p>

<table class=MsoNormalTable border=0 cellpadding=0 width="46%"
 style='width:46.0%;mso-cellspacing:1.5pt;mso-padding-alt:0pt 5.4pt 0pt 5.4pt'>
 <tr style='mso-yfti-irow:0'>
  <td width="37%" style='width:37.0%;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><strong>Elementarer Datentyp</strong></p>
  </td>
  <td width="63%" style='width:63.0%;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE><strong>Wrapper</strong></span><strong>
  - Klasse</strong></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>boolean</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>Boolean</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>char</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>Character</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>byte</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Byte</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>short</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Short</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>int</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Integer</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:6'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span class=SpellE>long</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Long</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:7'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>double</p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Double</p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:8;mso-yfti-lastrow:yes'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>float</p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>Float</p>
  </td>
 </tr>
</table>

<p>Die <span class=SpellE>Wrapper-Klassen</span> bieten noch andere, sehr
nützliche Funktionalitäten in Form von Klassenmethoden.</p>

<p><span class=SpellE><span lang=EN-GB style='mso-ansi-language:EN-GB'>Bsp</span></span><span
lang=EN-GB style='mso-ansi-language:EN-GB'>:<o:p></o:p></span></p>

<p><span lang=EN-GB style='mso-ansi-language:EN-GB'>String s = &quot;5&quot;;<o:p></o:p></span></p>

<p><span class=SpellE><span class=GramE><span lang=EN-GB style='mso-ansi-language:
EN-GB'>int</span></span></span><span lang=EN-GB style='mso-ansi-language:EN-GB'>
a = <span class=SpellE>Integer.parseInt</span>(s); // a = 5;<o:p></o:p></span></p>

<p><span class=SpellE><span class=GramE><span lang=EN-GB style='mso-ansi-language:
EN-GB'>int</span></span></span><span lang=EN-GB style='mso-ansi-language:EN-GB'>
a = 51;<o:p></o:p></span></p>

<p><span lang=EN-GB style='mso-ansi-language:EN-GB'>String s = <span
class=SpellE><span class=GramE>Integer.toHexString</span></span><span
class=GramE>(</span>a); // s = &quot;33&quot;;<o:p></o:p></span></p>

<p><span class=SpellE>char</span> c = 'a';</p>

<p><span class=SpellE>boolean</span> b = <span class=SpellE>Character.isLowerCase</span>(c);
// <span class=SpellE>true</span>, da Kleinbuchstabe</p>

<h2>Klassen für Formatierung</h2>

<p>Formatierungen werden in Java von speziellen Klassen aus dem Paket <span
class=SpellE>java.text</span> angeboten.</p>

<p>Format (A) &lt;- <span class=SpellE>NumberFormat</span> (A) &lt;- <span
class=SpellE>DecimalFormat</span></p>

<p>Die Klasse <span class=SpellE>NumberFormat</span> ist abstrakt bietet aber
Objekte an zur formatierten Umwandlung von Zahlen(<span class=SpellE>numbers</span>),
Währungsangaben(<span class=SpellE>currency</span>) und Prozentangaben(<span
class=SpellE>percent</span>) in Strings.</p>

<p><span class=SpellE>Bsp</span>:</p>

<p><span class=SpellE>System.out.println</span>(<span class=SpellE>NumberFormat.getNumberInstance</span>(
).<span class=SpellE>format</span>(6512.23)); // 6.512,23</p>

<p><span class=SpellE>System.out.println</span>(<span class=SpellE>NumberFormat.getCurrencyInstance</span>(
).<span class=SpellE>format</span>(32178.33)); // 32.178,33 &#8364;</p>

<p><span class=SpellE>System.out.println</span>(<span class=SpellE>NumberFormat.getPercentInstance</span>(
).<span class=SpellE>format</span>(0.16)); // 16%</p>

<p>Die Klasse <span class=SpellE>DecimalFormat</span> bietet die Umwandlung
numerischer Werte in Strings an. Das Ausgabeformat kann angegeben werden und
dem <span class=SpellE>Konstruktor</span> wird die Zeichenkette, welche
ausgegeben werden soll als Parameter mitgegeben.</p>

<p>Zeichen der Zeichenkette haben folgende Bedeutung:</p>

<p># Ziffer, führende und nachkommende Nullen werden unterdrückt<br>
0 Ziffer, führende und nachkommende Nullen werden angezeigt<br>
, das landesspezifische Gruppierungssymbol<br>
. das landesspezifische Trennsymbol<br>
% Angabe des Wertes in Prozent<br>
Alle anderen Zeichen werden übernommen. </p>

<p><span class=SpellE>Bsp</span>: </p>

<p><span class=SpellE>System.out.println</span>(<span class=SpellE>new</span> <span
class=SpellE>DecimalFormat</span>(&quot;Geschwindigkeit:
###,###0.000km/h&quot;).<span class=SpellE>format</span>(5153.368);
//Geschwindigkeit: 5.153,368km/h </p>

<p><span class=SpellE>System.out.println</span>(<span class=SpellE>new</span> <span
class=SpellE>DecimalFormat</span>(&quot;Durchmesser: 000.000mm&quot;).<span
class=SpellE>format</span>(3.4); // Durchmesser: 003,400mm </p>

<h2>Die Klasse System</h2>

<p>Besitzt den vordefinierten Standard-Ein-/Ausgabestrom in den <span
class=SpellE>öfentlichen</span> Attributen in und out. Greift über systemnahen
Methoden auf <span class=SpellE>Resourcen</span> des Rechners zu. Kann
Systemeinstellungen über <span class=SpellE>sogenannte</span> <span
class=SpellE>Properties</span> auslesen. Kann auch ein Programm über <span
class=SpellE>exit</span>( ) beenden.</p>

<h2>Einige Operationen von Systems</h2>

<p>Systemzeit: <span class=SpellE>long</span> <span class=SpellE>currentTimeMillis</span>(
)</p>

<p>Programm mit Status verlassen: <span class=SpellE>exit</span>(<span
class=SpellE>int</span> <span class=SpellE>status</span>)</p>

<p><span lang=EN-GB style='mso-ansi-language:EN-GB'>Garbage-Collector <span
class=SpellE>starten</span>: <span class=SpellE><span class=GramE>gc</span></span><span
class=GramE>(</span> )<o:p></o:p></span></p>

<p><span class=SpellE><span lang=EN-GB style='mso-ansi-language:EN-GB'>Performantes</span></span><span
lang=EN-GB style='mso-ansi-language:EN-GB'> Array-Copy: <span class=SpellE>arraycopy</span>(Object
<span class=SpellE>vorlage</span>, <span class=SpellE>int</span> <span
class=SpellE>abIndex</span>, Object <span class=SpellE>wohin</span>, <span
class=SpellE>int</span> <span class=SpellE>wohinIndex</span>, <span
class=SpellE>int</span> <span class=SpellE>anzahlKomponenten</span>)<o:p></o:p></span></p>

<h2><span class=SpellE>Properties</span> aus System</h2>

<p>Auslesen von <span class=SpellE>System-Properties</span>: String p = <span
class=SpellE>System.getProperty</span>(&quot;<span class=SpellE>user.name</span>&quot;);</p>

<p>Auszug aus den <span class=SpellE>Properties</span> die Java zur Verfügung
stellt:</p>

<p><span class=SpellE>java.version</span> // Java Versionsnummer</p>

<p><span class=SpellE>java.home</span> // Installationsverzeichnis</p>

<p><span class=SpellE>os.name</span> // Name des Betriebssystems</p>

<p><span class=SpellE>os.version</span> // Versionsnummer des OS</p>

<p><span class=SpellE>file.seperator</span> // Verzeichnistrennzeichen</p>

<p><span class=SpellE>path.seperator</span> // Pfadtrennzeichen</p>

<p><span class=SpellE>line.seperator</span> // Zeilentrennzeichen</p>

<p><span class=SpellE>user.name</span> // Benutzername</p>

<p><span class=SpellE>user.home</span> // <span class=SpellE>Home-Verzeichnis</span>
des Benutzers</p>

<h2>Die Klasse String</h2>

<p>Strings sind Objekte und keine elementare Datentypen. Strings sind Objekte
der Klasse String. Sie basieren auf dem Unicode 1.1.5 Zeichensatz (16-Bit, im
Gegensatz zu ASCII: 7 Bit). Die Klasse String besitzt als einzige Klasse einen
überladenen Operator, nämlich +.</p>

<p><span class=SpellE>Konstruktoren</span>:</p>

<p>String( )</p>

<p>String(&quot;<span class=SpellE>Literal</span>&quot;)</p>

<p>String(<span class=SpellE>char</span>[ ] <span class=SpellE>zeichenArray</span>)</p>

<p>String(<span class=SpellE>StringBuffer</span> <span class=SpellE>stringBufferObjekt</span>)</p>

<p>String(String <span class=SpellE>andererString</span>)</p>

<p>Länge eines Strings abfragen:</p>

<p><span class=SpellE>int</span> <span class=SpellE>length</span>( ) //
Vorsicht bei Arrays wird die Länge mit dem Attribut <span class=SpellE>length</span>
ermittelt, hier Methode <span class=SpellE>length</span>( )</p>

<p>Anhängen von Strings:</p>

<p>String gesamt = &quot;Teil1&quot; + &quot;Teil2&quot;;</p>

<p>Vergleich:</p>

<p><span class=SpellE>if</span> (gesamt = = 'a') // Referenzgleichheit</p>

<p><span class=SpellE>if</span>(<span class=SpellE>gesamt.equals</span>(&quot;a&quot;))
// Inhaltsgleichheit</p>

<p>Das Anhängen bzw. Zusammenhängen von Strings wird intern durch Anlegen und
Entfernen von Objekten gelöst. Dies sind aber sehr teure Operationen im Sinne
von Speicherausnutzung und Ausführungszeit. Lösung des Problems bietet die
Klasse <span class=SpellE>StringBuffer</span>. Diese Klasse ist zwar etwas
unhandlicher als die Klasse String aber man <span class=SpellE>muß</span> nicht
<span class=SpellE>jedesmal</span> ein String Objekt anlegen um den Inhalt
verändern zu können. Ein <span class=SpellE>StringBuffer</span> Objekt kann mit
der Methode <span class=SpellE>toString</span>( ) einfach wieder in ein Objekt
der Klasse String umgewandelt werden.</p>

<p>Das Anhängen, <span class=SpellE>Einügen</span> und Verändern von einzelnen
Zeichen erfolgt mit den Methoden <span class=SpellE>append</span>( ), <span
class=SpellE>insert</span>( ) und <span class=SpellE>setCharAt</span>( ) bzw. <span
class=SpellE>charAt</span>( ).</p>

<h1>Dynamischer Zugriff auf Klassen</h1>

<p>Bis jetzt haben wir auf Objekte nur zur Kompilierzeit statisch zugegriffen.
Viele Anwendungen erfordern aber eine Dynamik in der Art, um</p>

<p style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l1 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><span style='font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Klassen dynamisch zu laden und zu <span
class=SpellE>instanziieren</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l1 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><span style='font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Eigenschaften der Klasse zur Laufzeit zu
ermitteln</p>

<p><o:p>&nbsp;</o:p></p>

<p>Folgende <span class=SpellE>Packages</span> und Klassen sind dazu wichtig:</p>

<p style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span style='font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span class=SpellE>java.lang.Object</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span style='font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span class=SpellE>java.lang.Class</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span style='font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span class=SpellE>java.lang.reflect</span></p>

<h2>Die Klasse <span class=SpellE>Object</span></h2>

<p>Der Klasse <span class=SpellE>Object</span> können Instanzen anderer Klassen
zugewiesen werden, da <span class=SpellE>Object</span> die Basisklasse für alle
anderen Klassen ist.</p>

<p><span class=SpellE><i style='mso-bidi-font-style:normal'>Object</i></span><i
style='mso-bidi-font-style:normal'> o = <span class=SpellE>AnderesObjekt</span>;<o:p></o:p></i></p>

<p>Von jedem Objekt kann man ein Klassenobjekt über die <span class=SpellE>Mehtode</span>
<span class=SpellE><i style='mso-bidi-font-style:normal'>getClass</i></span>
anfordern. Dieses Objekt enthält Informationen zur Klasse des davon
abgeleiteten Objekts.</p>

<p><i style='mso-bidi-font-style:normal'><span lang=EN-GB style='mso-ansi-language:
EN-GB'>Class <span class=SpellE>objClass</span> = <span class=SpellE><span
class=GramE>myObject.getClass</span></span><span class=GramE>(</span> );<o:p></o:p></span></i></p>

<h2><span lang=EN-GB style='mso-ansi-language:EN-GB'>Die <span class=SpellE>Klasse</span>
Class<o:p></o:p></span></h2>

<p>Wird eine Klasse über das Laufzeitsystem geladen, wird ein so genanntes
Klassenobjekt vom Typ <span class=SpellE><i style='mso-bidi-font-style:normal'>Class</i></span><i
style='mso-bidi-font-style:normal'> </i>erzeugt. Über dieses Objekt kann man
Informationen zu der betreffenden Klasse abfragen und neue Instanzen dieser
Klasse erzeugen, setzt natürlich das Laden der Klasse voraus.</p>

<p>Wichtige Methoden von <span class=SpellE>Class</span></p>

<p><span class=SpellE><i style='mso-bidi-font-style:normal'>Class</i></span><i
style='mso-bidi-font-style:normal'> <span class=SpellE>forName</span>(String <span
class=SpellE>className</span>)<b style='mso-bidi-font-weight:normal'> </b></i>&#8211;
liefert ein Klassenobjekt zum übergebenen Klassennamen</p>

<p><span class=SpellE><i style='mso-bidi-font-style:normal'>Object</i></span><i
style='mso-bidi-font-style:normal'> <span class=SpellE>newInstance</span>( ) </i>&#8211;
erzeugt ein neues Objekt der Klasse und liefert eine Referenz auf den Typ <span
class=SpellE><i style='mso-bidi-font-style:normal'>Object</i></span> zurück.</p>

<p><i style='mso-bidi-font-style:normal'>String <span class=SpellE>getName</span>(
) </i>&#8211; liefert den <span class=SpellE>vollqualifizierten</span>
Klassennamen zurück</p>

<p><span class=SpellE><i style='mso-bidi-font-style:normal'>Class</i></span><i
style='mso-bidi-font-style:normal'> <span class=SpellE>getSuperClass</span>( ) </i>&#8211;
liefert das Klassenobjekt der Basisklasse zurück. Im Falle von <span
class=SpellE><i style='mso-bidi-font-style:normal'>Object</i></span>, ein
Interface, <span class=SpellE><i style='mso-bidi-font-style:normal'>void</i></span>
oder ein <span class=SpellE>primitver</span> Datentyp wird <i style='mso-bidi-font-style:
normal'>null</i> zurückgegeben.</p>

<p>Im ersten Schritt wird das Klassenobjekt der als Parameter übergebenen
Klasse über die Methode <span class=SpellE><i style='mso-bidi-font-style:normal'>forName</i></span>
erzeugt und über <span class=SpellE><i style='mso-bidi-font-style:normal'>newInstance</i></span>
ein Objekt dieser Klasse erzeugt. Dieses Objekt kann entsprechend <span
class=SpellE>gecastet</span> werden da der Klassenname bekannt ist.</p>

<h2>Das <span class=SpellE>Package</span> <span class=SpellE>java.lang.reflect</span></h2>

<p>Hier sind Methoden enthalten um die Methoden einer Klasse, den <span
class=SpellE>Konstruktor</span> einer Klasse und Felder einer Klasse zu
ermitteln.</p>

<p>&nbsp;</p>

</div>

</body>

</html>
